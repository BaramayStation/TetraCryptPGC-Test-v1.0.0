import os
import logging
import secrets
import hashlib
import hmac
from cryptography.hazmat.primitives.asymmetric import x25519
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from src.ml_kem import mlkem_keygen, mlkem_encapsulate, mlkem_decapsulate  # ✅ ML-KEM for PQC
from src.slh_dsa import slh_dsa_keygen, slh_dsa_sign, slh_dsa_verify  # ✅ SLH-DSA (FIPS 205)
from src.secure_hsm import store_key_in_hsm, retrieve_key_from_hsm
from src.remote_attestation import perform_attestation  # ✅ Hardware Attestation (TPM/SGX)

# 🔹 Secure Logging Configuration
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# 🔹 Environment Variables for Security Configurations
USE_HSM = os.getenv("USE_HSM", "true").lower() == "true"
SESSION_KEY = secrets.token_bytes(32)  # 256-bit Secure Session Key

class PQXDHHandshake:
    """Post-Quantum XDH Hybrid Key Exchange with ML-KEM + SLH-DSA Authentication."""

    def __init__(self):
        logging.info("🔹 Initializing PQXDH Secure Handshake (FIPS 205/206)...")

    def generate_x25519_keys(self):
        """Generate X25519 Key Pair for ECDH."""
        private_key = x25519.X25519PrivateKey.generate()
        public_key = private_key.public_key()
        return private_key, public_key

    def perform_mlkem_kem(self):
        """Execute ML-KEM-1024 Key Encapsulation Mechanism (FIPS 205)."""
        logging.info("🔹 Generating ML-KEM-1024 Key Pair...")
        pk_mlkem, sk_mlkem = mlkem_keygen()

        logging.info("🔹 Encapsulating Shared Secret with ML-KEM...")
        ciphertext, shared_secret_enc = mlkem_encapsulate(pk_mlkem)

        return pk_mlkem, sk_mlkem, ciphertext, shared_secret_enc

    def perform_slh_dsa_signature(self, message, private_key):
        """Sign a message using SLH-DSA-256 (FIPS 205)."""
        signature = slh_dsa_sign(message, private_key)
        return signature

    def hybrid_xdh_handshake(self):
        """Perform a hybrid post-quantum handshake using XDH + ML-KEM + SLH-DSA."""
        logging.info("🔹 Initiating PQXDH Hybrid Key Exchange (FIPS 205/206)...")

        # Step 1: Hardware Attestation (TPM/SGX)
        logging.info("🔹 Performing Remote Attestation...")
        if not perform_attestation():
            raise ValueError("🚨 Remote Attestation Failed! Device integrity check failed.")

        # Step 2: Generate X25519 Key Pairs
        alice_xdh_priv, alice_xdh_pub = self.generate_x25519_keys()
        bob_xdh_priv, bob_xdh_pub = self.generate_x25519_keys()

        # Step 3: Execute ML-KEM-1024 KEM
        pk_mlkem, sk_mlkem, ciphertext, shared_secret_mlkem = self.perform_mlkem_kem()

        # Step 4: Derive Shared Secret Using HKDF
        shared_secret_xdh = alice_xdh_priv.exchange(bob_xdh_pub)
        hkdf = HKDF(
            algorithm=hashes.SHA3_512(),
            length=64,
            salt=None,
            info=b"TetraCrypt PQXDH Handshake"
        )
        final_shared_secret = hkdf.derive(shared_secret_xdh + shared_secret_mlkem)

        # Step 5: Mutual Authentication with SLH-DSA
        logging.info("🔹 Signing with SLH-DSA-256...")
        slh_dsa_signature = self.perform_slh_dsa_signature(final_shared_secret, sk_mlkem)

        logging.info("🔹 Verifying SLH-DSA-256 Signature...")
        if not slh_dsa_verify(final_shared_secret, slh_dsa_signature, pk_mlkem):
            raise ValueError("🚨 SLH-DSA Signature Verification Failed!")

        # Step 6: Store Final Key in HSM (if enabled)
        if USE_HSM:
            store_key_in_hsm(final_shared_secret)
            logging.info("🔐 Final Shared Secret Stored in HSM.")

        logging.info("✅ PQXDH Mutual Authentication & Key Exchange Successful (FIPS 205/206).")

        return final_shared_secret

if __name__ == "__main__":
    pqxdh = PQXDHHandshake()
    secure_shared_key = pqxdh.hybrid_xdh_handshake()
    logging.info(f"🔑 Established Secure Shared Key: {secure_shared_key.hex()}")
